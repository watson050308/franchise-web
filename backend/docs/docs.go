// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/login": {
            "post": {
                "description": "Authenticate a user and generate a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login response",
                        "schema": {
                            "$ref": "#/definitions/services.SuccessfulLoginResponse"
                        }
                    },
                    "401": {
                        "description": "Incorrect email or password",
                        "schema": {
                            "$ref": "#/definitions/services.HttpError"
                        }
                    },
                    "500": {
                        "description": "Error generating token",
                        "schema": {
                            "$ref": "#/definitions/services.ServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "delete": {
                "description": "Clear the authentication token and log out the User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logout a User",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/services.SuccessfulLogoutResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/ping": {
            "get": {
                "description": "test",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "Test",
                "responses": {}
            }
        },
        "/api/v1/register": {
            "post": {
                "description": "Register a new User with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new User",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/services.SuccessfulSignup"
                        }
                    },
                    "400": {
                        "description": "Bad request response",
                        "schema": {
                            "$ref": "#/definitions/services.BadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error response",
                        "schema": {
                            "$ref": "#/definitions/services.ServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "services.BadRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "Incorrect email"
                }
            }
        },
        "services.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "error": {
                    "type": "string",
                    "example": "Incorrect email"
                }
            }
        },
        "services.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@email.com"
                },
                "password": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "services.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@email.com"
                },
                "name": {
                    "type": "string",
                    "example": "User's name"
                },
                "password": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "services.ServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "Error generating token"
                }
            }
        },
        "services.SuccessfulLoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User login successfully"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJRC"
                }
            }
        },
        "services.SuccessfulLogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logged out successfully"
                }
            }
        },
        "services.SuccessfulSignup": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Web API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
